
# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- main

# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   GOBIN:  '$(GOPATH)/bin' # Go binaries path
#   GOROOT: '/usr/local/go1.11' # Go installation path
#   GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
#   modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

# steps:
# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'

# trigger: none

variables:
  GOPATH: '$(Agent.BuildDirectory)/gopath' # Go workspace path
  GOROOT: '$(Agent.BuildDirectory)/go' # Go installation path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path

steps:
- task: GoTool@0
  inputs:
    version: '1.13.5'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      echo "Installing Dep"
      go get -u github.com/golang/dep/cmd/dep
      echo "Adding GOBIN to path: $env:GOBIN"
      $env:PATH += ":$env:GOBIN"
      echo "Added $env:GOBIN to path $env:PATH"
      
      # echo "Moving source files"
      
      Copy-Item $env:ProjectRoot -Filter *.* -Destination $env:GOPATH/src/demo.organization.com -Recurse
      $env:ProjectRoot = "$env:GOPATH/src/demo.organization.com"
      
      echo "moving to $env:ProjectRoot"
      cd $env:ProjectRoot
      # echo "Restoring dependencies..."
      dep ensure
      
      get-childitem $env:ProjectRoot 
      
      echo "Building ..."
      go build -o "main" ./main.go
      
      get-childitem $env:ProjectRoot
# - script: |
#     go version
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         # dep ensure
#     fi
#     go build -v .
#  #workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'

# - task: GoTool@0
#   inputs:
#     version: '1.13.5'
# - task: Go@0
#   inputs:
#     command: 'get'
#     arguments: '-d'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - task: Go@0
#   inputs:
#     command: 'build'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - task: CopyFiles@2
#   inputs:
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'
# - task: PublishBuildArtifacts@1
#   inputs:
#      artifactName: drop
# - task: CopyFiles@2
#   displayName: 'Copy Files to: \\mypath\storage\$(Build.BuildNumber)'
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     Contents: '_buildOutput/**' #replace with file path if needed
#     TargetFolder: '\mypath\storage\$(Build.BuildNumber)'



# - task: Go@0
#   inputs:
#     command: 'test'
#     arguments: '-v ./...'
#     workingDirectory: '$(modulePath)'

# - script: go test -v ./...
#   workingDirectory: '$(modulePath)'
#   displayName: 'Run tests'
