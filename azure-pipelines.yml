variables:
  GOPATH: '$(Agent.BuildDirectory)/gopath' # Go workspace path
  GOROOT: '$(Agent.BuildDirectory)/go' # Go installation path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path

  # GOBIN:  '$(GOPATH)/bin' # Go binaries path
  # GOROOT: '/usr/local/go1.13' # Go installation path
  # GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  # modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
    
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    go build -v .
 #workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'

# - task: GoTool@0
#   inputs:
#     version: '1.13.5'
# - task: Go@0
#   inputs:
#     command: 'get'
#     arguments: '-d'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - task: Go@0
#   inputs:
#     command: 'build'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - task: CopyFiles@2
#   inputs:
#     TargetFolder: '$(Build.ArtifactStagingDirectory)'
# - task: PublishBuildArtifacts@1
#   inputs:
#      artifactName: drop
# - task: CopyFiles@2
#   displayName: 'Copy Files to: \\mypath\storage\$(Build.BuildNumber)'
#   inputs:
#     SourceFolder: '$(Build.SourcesDirectory)'
#     Contents: '_buildOutput/**' #replace with file path if needed
#     TargetFolder: '\mypath\storage\$(Build.BuildNumber)'



# - task: Go@0
#   inputs:
#     command: 'test'
#     arguments: '-v ./...'
#     workingDirectory: '$(modulePath)'

# - script: go test -v ./...
#   workingDirectory: '$(modulePath)'
#   displayName: 'Run tests'
