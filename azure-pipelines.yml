# Go 
# Build your Go project. 
trigger: 
 - master

pool:
   vmImage: 'ubuntu-latest'

steps: 
- task: GoTool@0
  inputs:
    version: '1.13'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-v'
    workingDirectory: '$(modulePath)'

- task: ArchiveFiles@2
  inputs:
     rootFolderOrFile: '$(Build.Repository.LocalPath)'     
     includeRootFolder: False 
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop



# trigger:
# - master

# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   GOBIN:  '$(GOPATH)/bin' # Go binaries path
#   GOROOT: '/usr/local/go1.13' # Go installation path
#   GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
#   modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

# steps:
# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'
